{
  description = "NixOS based syzkaller setup";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixpkgs-unstable";

    nixos-generators = {
      url = "github:nix-community/nixos-generators";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = { self, nixpkgs, nixos-generators, ... }:
    let
      system = "x86_64-linux";
      pkgs = import nixpkgs { inherit system; };
      lib = nixpkgs.lib;
      linux = pkgs.linuxPackages_testing;
    in {
      vm = nixos-generators.nixosGenerate {
        system = "x86_64-linux";
        modules = [ (import ./vm.nix { inherit pkgs lib linux; }) ];
        format = "qcow";
      };

      devShells.${system}.default = pkgs.mkShell {
        nativeBuildInputs = with pkgs; [
          nixfmt
          syzkaller
          clang-tools
          nil
          (writeShellScriptBin "build-vm" ''
            echo "Building VM..."

            nix build .#vm
          '')
          (writeShellScriptBin "run-syzkaller" ''
            cat <<-EOF > ./.syzkaller.conf
            # This is auto-generated by run-syzkaller! Changes will be overwritten. See flake.nix
            {
              "name": "QEMU-amd64",
              "target": "linux/amd64",
              "http": "127.0.0.1:56700",
              "workdir": "/tmp/syzkaller-workdir",
              "syzkaller": "${syzkaller}",
              "kernel_obj": "${linux.kernel.dev}",
              "kernel_src": "${linux.kernel.dev}",
              "image": "${self.vm}/nixos.qcow2",
              "procs": 8,
              "type": "qemu",
              "vm": {
                "count": 4,
                "qemu": "${qemu}/bin/qemu-system-x86_64",
                "cmdline": "console=ttyAMA0 root=/dev/vda",
                "kernel": "${linux.kernel}/bzImage",
                "cpu": 2,
                "mem": 2048
              }
            }
            EOF
            syz-manager -config=./.syzkaller.conf
          '')
        ];
      };
    };
}
